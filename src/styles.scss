// @ Normalize
* {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-tap-highlight-color: transparent;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
html {
  line-height: 1.15;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}
body,
html {
  font-family: "Open Sans", sans-serif;
  background: #fff;
  font-size: 14px;
}
body {
  margin: 0;
}
a {
  background-color: transparent;
  text-decoration: none !important;
}
button {
  font-family: "Open Sans", sans-serif;
  outline: 0;
  border: 0;
  border-radius: 0;
  background: 0;
  cursor: pointer;
  line-height: 1.15;
  margin: 0;
}
ul {
  list-style: none;
}

// @Functions
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
  }
}

// @Variables
$displays: none, inline, inline-block, block, table, table-row, table-cell, flex, inline-flex !default;
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
) !default;

@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-starts-at-zero($grid-breakpoints, "$grid-breakpoints");

// @Mixins
// Breakpoint
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// @Utilities
// Display
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $value in $displays {
      .d#{$infix}-#{$value} {
        display: $value !important;
      }
    }
  }
}

// Flex
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .flex#{$infix}-row {
      flex-direction: row !important;
    }
    .flex#{$infix}-column {
      flex-direction: column !important;
    }
    .flex#{$infix}-row-reverse {
      flex-direction: row-reverse !important;
    }
    .flex#{$infix}-column-reverse {
      flex-direction: column-reverse !important;
    }

    .flex#{$infix}-wrap {
      flex-wrap: wrap !important;
    }
    .flex#{$infix}-nowrap {
      flex-wrap: nowrap !important;
    }
    .flex#{$infix}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    .flex#{$infix}-fill {
      flex: 1 1 auto !important;
    }
    .flex#{$infix}-grow-0 {
      flex-grow: 0 !important;
    }
    .flex#{$infix}-grow-1 {
      flex-grow: 1 !important;
    }
    .flex#{$infix}-shrink-0 {
      flex-shrink: 0 !important;
    }
    .flex#{$infix}-shrink-1 {
      flex-shrink: 1 !important;
    }

    .justify-content#{$infix}-start {
      justify-content: flex-start !important;
    }
    .justify-content#{$infix}-end {
      justify-content: flex-end !important;
    }
    .justify-content#{$infix}-center {
      justify-content: center !important;
    }
    .justify-content#{$infix}-between {
      justify-content: space-between !important;
    }
    .justify-content#{$infix}-around {
      justify-content: space-around !important;
    }

    .align-items#{$infix}-start {
      align-items: flex-start !important;
    }
    .align-items#{$infix}-end {
      align-items: flex-end !important;
    }
    .align-items#{$infix}-center {
      align-items: center !important;
    }
    .align-items#{$infix}-baseline {
      align-items: baseline !important;
    }
    .align-items#{$infix}-stretch {
      align-items: stretch !important;
    }

    .align-content#{$infix}-start {
      align-content: flex-start !important;
    }
    .align-content#{$infix}-end {
      align-content: flex-end !important;
    }
    .align-content#{$infix}-center {
      align-content: center !important;
    }
    .align-content#{$infix}-between {
      align-content: space-between !important;
    }
    .align-content#{$infix}-around {
      align-content: space-around !important;
    }
    .align-content#{$infix}-stretch {
      align-content: stretch !important;
    }

    .align-self#{$infix}-auto {
      align-self: auto !important;
    }
    .align-self#{$infix}-start {
      align-self: flex-start !important;
    }
    .align-self#{$infix}-end {
      align-self: flex-end !important;
    }
    .align-self#{$infix}-center {
      align-self: center !important;
    }
    .align-self#{$infix}-baseline {
      align-self: baseline !important;
    }
    .align-self#{$infix}-stretch {
      align-self: stretch !important;
    }
  }
}

// Position utils
.position-relative {
  position: relative;
}
.position-absolute {
  position: absolute;
}
.position-static {
  position: static;
}
.position-fixed {
  position: fixed;
}

// Size
@each $prop, $abbrev in (height: h, width: w) {
  @for $index from 0 through 180 {
    $size: $index * 4;
    $length: #{$size}px;

    .#{$abbrev}-#{$size} {
      #{$prop}: $length !important;
      min-#{$prop}: $length !important;
      max-#{$prop}: $length !important;
    }
  }

  // Percentage
  @for $i from 0 through 20 {
    $i-p: 5 * $i;
    $size-p: 5% * $i;

    .#{$abbrev}-#{$i-p}-p {
      #{$prop}: $size-p !important;
    }
  }
}

// Spacing
@each $prop, $abbrev in (margin: m, padding: p) {
  @for $index from 0 through 64 {
    $size: $index * 4;
    $length: #{$size}px;

    .#{$abbrev}-#{$size} {
      #{$prop}: $length !important;
    }
  }

  @for $index from 0 through 64 {
    $size: $index * 4;
    $length: #{$size}px;

    .#{$abbrev}x-#{$size} {
      #{$prop}-right: $length !important;
      #{$prop}-left: $length !important;
    }

    .#{$abbrev}y-#{$size} {
      #{$prop}-top: $length !important;
      #{$prop}-bottom: $length !important;
    }
  }

  @for $index from 0 through 64 {
    $size: $index * 4;
    $length: #{$size}px;

    .#{$abbrev}t-#{$size} {
      #{$prop}-top: $length !important;
    }

    .#{$abbrev}r-#{$size} {
      #{$prop}-right: $length !important;
    }

    .#{$abbrev}b-#{$size} {
      #{$prop}-bottom: $length !important;
    }

    .#{$abbrev}l-#{$size} {
      #{$prop}-left: $length !important;
    }
  }

  @if ($abbrev == m) {
    // Some special margin utils for flex alignments
    .m-auto {
      margin: auto !important;
    }

    .mt-auto {
      margin-top: auto !important;
    }

    .mr-auto {
      margin-right: auto !important;
    }

    .mb-auto {
      margin-bottom: auto !important;
    }

    .ml-auto {
      margin-left: auto !important;
    }

    .mx-auto {
      margin-right: auto !important;
      margin-left: auto !important;
    }

    .my-auto {
      margin-top: auto !important;
      margin-bottom: auto !important;
    }
  }
}

// Z-index
@for $index from 0 through 10 {
  .z-#{$index} {
    z-index: #{$index};
  }
}

// Overflow
.overflow-h {
  overflow: hidden;
}

// Cursor
.cursor-pointer {
  cursor: pointer;
}
.cursor-default {
  cursor: default;
}

// Text format helpers
.text-italic {
  font-style: italic;
}

.text-semibold {
  font-weight: 600;
}

.text-bold {
  font-weight: 700;
}

.text-strike {
  text-decoration: line-through;
}

.text-super {
  vertical-align: super;
}

.text-sub {
  vertical-align: sub;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-lowercase {
  text-transform: lowercase;
}

.text-uppercase {
  text-transform: uppercase;
}

// Text align helpers
.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

// Font weight helpers
@for $weight from 1 through 9 {
  .font-weight-#{$weight * 100} {
    font-weight: #{$weight * 100};
  }
}

// Font size helpers
@for $size from 1 through 60 {
  .font-size-#{$size * 2} {
    font-size: #{$size * 2}px;
  }
}

// @Animations
.wow {
  animation-duration: 1s;
  animation-fill-mode: both;
}
@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
.fadeIn {
  animation-name: fadeIn;
  transition: all cubic-bezier(0.55, 0, 0.1, 1) 0.5s;
}
@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
.fadeInUp {
  animation-name: fadeInUp;
  transition: all cubic-bezier(0.55, 0, 0.1, 1) 0.5s;
}
@keyframes fadeInUp2 {
  0% {
    opacity: 0;
    transform: translate3d(0, 100%, 0);
  }
  100% {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }
}
.fadeInUp2 {
  animation-name: fadeInUp2;
  animation-timing-function: cubic-bezier(0.65, 0.02, 0.23, 1);
  transition: transform 0.6s cubic-bezier(0.65, 0.02, 0.23, 1);
}
@keyframes fadeInDown {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
.fadeInDown {
  animation-name: fadeInDown;
  transition: all cubic-bezier(0.55, 0, 0.1, 1) 0.5s;
}
@keyframes lineInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100%);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
.lineInLeft {
  animation-name: lineInLeft;
  animation-timing-function: cubic-bezier(0.65, 0.02, 0.23, 1);
  transition: transform 0.6s cubic-bezier(0.65, 0.02, 0.23, 1);
}
@keyframes lineInRight {
  0% {
    opacity: 0;
    transform: translateX(100%);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
.lineInRight {
  animation-name: lineInRight;
  animation-timing-function: cubic-bezier(0.65, 0.02, 0.23, 1);
  transition: transform 0.6s cubic-bezier(0.65, 0.02, 0.23, 1);
}
@keyframes lineInDown {
  0% {
    opacity: 0;
    transform: translateY(-100%);
  }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
    transform: translateY(0);
  }
}
.lineInDown {
  animation-name: lineInDown;
  animation-timing-function: cubic-bezier(0.65, 0.02, 0.23, 1);
  transition: transform 0.6s cubic-bezier(0.65, 0.02, 0.23, 1);
}
@keyframes boxInLeft {
  0% {
    opacity: 0;
    width: 0;
  }
  100% {
    opacity: 1;
    width: 100%;
  }
}
.boxInLeft {
  animation-name: boxInLeft;
  animation-timing-function: cubic-bezier(0.65, 0.02, 0.23, 1);
  transition: transform 0.6s cubic-bezier(0.65, 0.02, 0.23, 1);
}
@keyframes boxInLeftOverlay {
  0% {
    -webkit-transform: translateX(0);
    transform: translateX(0);
  }
  100% {
    -webkit-transform: translateX(100%);
    transform: translateX(100%);
  }
}
.boxInLeftOverlay {
  animation-name: boxInLeftOverlay;
  animation-timing-function: cubic-bezier(0.65, 0.02, 0.23, 1);
  transition: transform 0.6s cubic-bezier(0.65, 0.02, 0.23, 1);
}

// Custom
.boga-cont {
  position: relative;
  width: 100%;
  max-width: 1152px;
  padding: 0 24px;
  margin: 0 auto;
}
.bg-icon {
  background-repeat: no-repeat;
  filter: invert(1);
}
.reveal-overlay {
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: #f5f5f5;
  transform: translateX(-100%);
}
.parallax-overlay {
  top: 0;
  left: 0;
}
.parallax-bg {
  min-height: 100vh;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  width: 100%;
  .parallax-image {
    min-height: 110vh;
    width: 100%;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    position: absolute;
    top: 0;
    left: 0;
  }
}